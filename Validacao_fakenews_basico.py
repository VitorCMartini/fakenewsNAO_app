import os
import streamlit as st
from google.generativeai import GenerativeModel
from datetime import date
import warnings
import json

warnings.filterwarnings("ignore")

# Defina sua chave de API Gemini aqui
api_key = st.secrets["GOOGLE_API_KEY"]
os.environ["GOOGLE_API_KEY"] = api_key

MODEL_ID = "gemini-2.0-flash"

# Fun√ß√µes para mem√≥ria do chat
MEMORIA_PATH = "chat_memoria.json"

def carregar_memoria():
    if os.path.exists(MEMORIA_PATH):
        with open(MEMORIA_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def salvar_memoria(memoria):
    with open(MEMORIA_PATH, "w", encoding="utf-8") as f:
        json.dump(memoria, f, ensure_ascii=False, indent=2)

# Fun√ß√£o para enviar prompt ao Gemini
def gerar_resposta(prompt):
    model = GenerativeModel(MODEL_ID)
    response = model.generate_content(prompt)
    return response.text

##########################################
# --- Agente 1: Buscador de Not√≠cias --- #
##########################################
def agente_buscador(topico, data_de_hoje):
    prompt = f"""
Voc√™ √© um assistente de pesquisa especializado em determinar a probabilidade de veracidade de um t√≥pico com base na an√°lise de not√≠cias recentes e hist√≥ricas.

Sua tarefa √© buscar not√≠cias relacionadas ao seguinte t√≥pico:

T√≥pico: {topico}
Data de hoje: {data_de_hoje}

Ao realizar a busca e analisar os resultados, siga estas etapas:

1. Busque as √∫ltimas not√≠cias relevantes sobre o t√≥pico: Concentre-se em not√≠cias publicadas recentemente (idealmente nos √∫ltimos meses e de fontes seguras e/ou institucionais).
2. Analise a probabilidade de veracidade com base na compara√ß√£o:
   - Concord√¢ncia: Verifique se m√∫ltiplas fontes confi√°veis reportam informa√ß√µes semelhantes sobre o t√≥pico. Quanto maior a concord√¢ncia entre fontes reput√°veis, maior a probabilidade de veracidade.
   - Tom: Avalie o tom das not√≠cias. Not√≠cias com tom neutro e factual de fontes confi√°veis tendem a indicar maior probabilidade de veracidade do que not√≠cias com tom sensacionalista ou excessivamente opinativo.
   - Entusiasmo/Cobertura: Se um t√≥pico gerar uma grande quantidade de not√≠cias e discuss√µes de fontes diversas e confi√°veis, isso pode indicar sua relev√¢ncia e potencial veracidade (embora n√£o garanta).
3. Lide com poucos resultados ou falta de entusiasmo:
   - Se houver poucas not√≠cias recentes ou pouco entusiasmo em torno do t√≥pico, realize uma busca por not√≠cias que possam ter desencadeado o tema, buscando informa√ß√µes de at√© dois anos antes.
   - Avalie os fatos apresentados nessas not√≠cias mais antigas para entender a origem e o desenvolvimento do tema.
4. Formate cada not√≠cia encontrada: Para cada not√≠cia relevante, inclua no seu relat√≥rio:
   - Data de Publica√ß√£o: (Extra√≠da da not√≠cia)
   - Autor/Fonte: (Nome do ve√≠culo ou autor, se dispon√≠vel)
   - T√≠tulo da Not√≠cia:
   - Breve Resumo/Trecho Relevante: (Um ou dois par√°grafos destacando as informa√ß√µes chave)

Seu relat√≥rio deve ser um resumo das not√≠cias encontradas e sua avalia√ß√£o inicial da probabilidade de veracidade do t√≥pico com base na sua an√°lise comparativa, tom e cobertura.
Mencione se houve poucos resultados recentes e como voc√™ procedeu para investigar a origem do tema.
"""
    return gerar_resposta(prompt)

################################################
# --- Agente 2: Avaliador de not√≠cias --- #
################################################
def agente_avaliador(topico, noticias_buscadas):
    prompt = f"""
Voc√™ √© um assistente de an√°lise de informa√ß√µes, respons√°vel por avaliar o relat√≥rio produzido pelo 'agente_buscador' sobre a veracidade de um t√≥pico.

T√≥pico: {topico}

Relat√≥rio do agente_buscador:
{noticias_buscadas}

Com base no relat√≥rio acima, realize as seguintes a√ß√µes:

1. Classifica√ß√£o Hier√°rquica da Veracidade: Classifique a probabilidade de veracidade da informa√ß√£o em uma escala (por exemplo: Alta Probabilidade, M√©dia Probabilidade, Baixa Probabilidade, Improv√°vel, N√£o Conclusivo). Justifique sua classifica√ß√£o com base na concord√¢ncia, tom e entusiasmo observados nas not√≠cias.
2. An√°lise Qualitativa da Veracidade: Descreva qualitativamente o n√≠vel de suporte factual encontrado. Existem evid√™ncias concretas e verific√°veis? As fontes s√£o confi√°veis e consistentes? H√° contradi√ß√µes ou informa√ß√µes conflitantes?
3. An√°lise Quantitativa da Veracidade: Se poss√≠vel, quantifique a for√ßa do suporte (por exemplo: "8 em cada 10 fontes principais reportam informa√ß√µes consistentes").
4. Identifica√ß√£o de Vi√©s Ideol√≥gico: Analise as fontes das not√≠cias em busca de poss√≠veis vieses ideol√≥gicos que possam influenciar a forma como a informa√ß√£o √© apresentada. Mencione os poss√≠veis vieses identificados e como eles podem afetar a interpreta√ß√£o da informa√ß√£o.
5. Contextualiza√ß√£o da Informa√ß√£o: Com base nas not√≠cias e em seu conhecimento geral, forne√ßa o contexto prov√°vel em que a informa√ß√£o est√° inserida. Quais eventos ou situa√ß√µes podem estar relacionados a essa informa√ß√£o?
6. Conte√∫do de Apoio para o Agente Redator: Forne√ßa uma lista concisa de pontos chave, fatos confirmados (se houver), evid√™ncias claras e o contexto identificado que o 'agente_redator' pode usar para escrever seu relat√≥rio. Priorize informa√ß√µes com forte suporte factual.

Seu relat√≥rio deve ser uma an√°lise estruturada da probabilidade de veracidade, vi√©s ideol√≥gico, contexto e um resumo de conte√∫do chave para o 'agente_redator'.
"""
    return gerar_resposta(prompt)

######################################
# --- Agente 3: Redator do Post --- #
######################################
def agente_redator(topico, avaliacao_critica):
    prompt = f"""
Voc√™ √© um redator de relat√≥rios informativos, respons√°vel por apresentar um parecer claro e direto sobre a veracidade de uma informa√ß√£o com base na an√°lise fornecida pelo 'agente_avaliador'.

T√≥pico: {topico}

Relat√≥rio do agente_avaliador:
{avaliacao_critica}

Com base no relat√≥rio acima, redija um relat√≥rio que inclua os seguintes elementos:

1. Parecer sobre a Veracidade: Apresente de forma clara o parecer sobre a probabilidade de veracidade da informa√ß√£o (usando a classifica√ß√£o do 'agente_avaliador').
2. Ve√≠culo de Dissemina√ß√£o (se conhecido): Mencione qual foi o ve√≠culo de informa√ß√£o que disseminou a not√≠cia original (se essa informa√ß√£o estiver dispon√≠vel no input ou nos relat√≥rios anteriores).
3. Contexto da Informa√ß√£o: Apresente o contexto em que a informa√ß√£o provavelmente est√° inserida, conforme identificado pelo 'agente_avaliador'.
4. Informa√ß√µes Esclarecedoras: Forne√ßa informa√ß√µes chave que ajudem o leitor a entender a mensagem com maior facilidade. Baseie-se nos fatos confirmados e nas evid√™ncias claras identificadas pelo 'agente_avaliador'.
5. Fontes Principais (opcional): Se relevante e conciso, voc√™ pode mencionar as principais fontes que sustentam o parecer (sem entrar em detalhes exaustivos).

Seu relat√≥rio deve ser um texto claro, direto e informativo, resumindo a an√°lise de veracidade, o contexto e as informa√ß√µes essenciais para o entendimento do leitor. Evite jarg√µes e seja objetivo.
"""
    return gerar_resposta(prompt)

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    prompt = f"""
Voc√™ √© um revisor de textos com foco em clareza e precis√£o. Sua tarefa √© revisar o relat√≥rio escrito pelo 'agente_redator' em busca de frases amb√≠guas que possam levar a interpreta√ß√µes equivocadas.

T√≥pico: {topico}

Rascunho do agente_redator:
{rascunho_gerado}

Ao revisar o relat√≥rio, siga estas etapas:

1. Leia atentamente o relat√≥rio.
2. Identifique frases que possam ter m√∫ltiplos significados ou que n√£o sejam claras o suficiente. Procure por pronomes com referentes obscuros, constru√ß√µes gramaticais complexas que dificultam a compreens√£o, termos vagos ou imprecisos, e qualquer outra formula√ß√£o que possa gerar confus√£o no leitor.
3. Sugira revis√µes para tornar as frases mais claras e diretas. Seu objetivo √© eliminar qualquer ambiguidade e garantir que a mensagem seja transmitida de forma inequ√≠voca.
4. Mantenha o tom e o estilo do relat√≥rio original o m√°ximo poss√≠vel, focando apenas na elimina√ß√£o da ambiguidade.

Seu relat√≥rio deve ser uma lista das frases amb√≠guas encontradas e suas sugest√µes de revis√£o para maior clareza. Se n√£o encontrar ambiguidades, informe isso explicitamente.
"""
    return gerar_resposta(prompt)

# --- Interface Streamlit com mem√≥ria ---
st.set_page_config(page_title="Verificador de Fake News", layout="wide")
st.title("üöÄ Sistema de Verifica√ß√£o de Not√≠cias com Gemini")

# Carregar hist√≥rico do chat
memoria = carregar_memoria()

topico = st.text_input("Digite o T√ìPICO sobre o qual voc√™ quer verificar a informa√ß√£o:")

if st.button("Verificar not√≠cia"):
    if not topico:
        st.warning("Voc√™ esqueceu de digitar o t√≥pico!")
    else:
        data_de_hoje = date.today().strftime("%d/%m/%Y")
        st.info("Buscando not√≠cias...")
        noticias_buscadas = agente_buscador(topico, data_de_hoje)
        st.success("Not√≠cias buscadas!")
        st.info("Avaliando not√≠cias...")
        avaliacao_critica = agente_avaliador(topico, noticias_buscadas)
        st.success("Avalia√ß√£o cr√≠tica pronta!")
        st.info("Redigindo relat√≥rio...")
        redacao = agente_redator(topico, avaliacao_critica)
        st.markdown("### Rascunho Gerado")
        st.markdown(redacao)
        st.info("Revisando relat√≥rio...")
        redacao_revisada = agente_revisor(topico, redacao)
        st.markdown("### Rascunho Revisado")
        st.markdown(redacao_revisada)

        # Salvar no hist√≥rico/mem√≥ria
        memoria.append({
            "data": data_de_hoje,
            "topico": topico,
            "noticias_buscadas": noticias_buscadas,
            "avaliacao_critica": avaliacao_critica,
            "redacao": redacao,
            "redacao_revisada": redacao_revisada
        })
        salvar_memoria(memoria)

# Exibir hist√≥rico do chat
if memoria:
    st.markdown("---")
    st.markdown("## Hist√≥rico de Consultas")
    for i, item in enumerate(reversed(memoria), 1):
        with st.expander(f"{item['data']} - {item['topico']}"):
            st.markdown("**Rascunho Revisado:**")
            st.markdown(item["redacao_revisada"])